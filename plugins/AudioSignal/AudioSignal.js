JSYG.require('Slider');(function() {	"use strict";		/**	 * <strong>nécessite le module Audio/AudioSignal</strong><br/><br/>	 * Trac� d'un signal audio	 * @param arg argument JSYG faisant référence � un élément audio (cr�� si non défini) 	 * @param opt optionnel, objet définissant les options. Si défini, le trac� de signal est activ�.	 * @returns {JSYG.AudioSignal}	 */	JSYG.AudioSignal = function(arg,opt) {				if (!arg) { arg = '<audio>'; }		/**		 * élément audio		 */		this.node = new JSYG(arg).node;				/**		 * contr�le du zoom		 */		this.zoomCtrl = new JSYG.Slider();				var zoom = this.zoomCtrl;				zoom.set({			min:0.1,max:10,step:0.1,			height:100,			width:7,			cursorOverflow:4,			orientation:'vertical'		});						if (opt) { this.enable(opt); }	};			JSYG.AudioSignal.prototype = {			constructor : JSYG.AudioSignal,		/**		 * Chemin SVG � définir pour tracer le signal		 */		path : null,		/**		 * Ecart en pixels entre 2 points		 */		precision : 1,		/**		 * Zoom initial		 */		initialZoom : 1,		/**		 * largeur (largeur du canvas SVG par d�faut)		 */		width : null,		/**		 * hauteur (hauteur du canvas SVG par d�faut)		 */		height : null,		/**		 * Indique si le signal est actif		 */		enabled : false,					set : JSYG.StdConstruct.prototype.set,				setNode : function(arg) {			var enabled = this.enabled;			this.disable();			this.node = new JSYG(arg).node;			if (enabled) { this.enable(); }			return this;		},		/**		 * Remise � z�ro du signal		 */		clear : function() {						var path = new JSYG(this.path);			if (path.length>0) { path.attr('d','M0,0'); }		},		/**		 * Active le trac� du signal		 * @param opt optionnel, objet définissant les options		 * @returns {JSYG.AudioSignal}		 */		enable : function(opt) {						this.disable();						if (opt) { this.set(opt); }						var jNode = new JSYG(this.node);			var path = new JSYG(this.path);			if (path.length==0) { throw new Error("Il faut définir la propriété path"); }						var svg = path.offsetParent();			var dim = svg.getDim();			var duration;			var that = this;			var pt;			var bufferLength;						var width = this.width || dim.width;			var height = this.height || dim.height;						var request = null;			var d;										var fcts = {							'loadedmetadata' : function() {					if (that.zoomCtrl.enabled) { that.zoomCtrl.val(path.scaleY()); }					if (path.parent().node !== svg.node) {						var pt = new JSYG.Vect(width,height).mtx(path.parent().getMtx('ctm').inverse());						width = pt.x; height=pt.y;					}					d = 'M-10,'+(height/2)+'L-10,-1000L-10,'+(1000+height)+'L-10,'+(height/2)+'L0,'+height/2;					path.attr('d',d);					duration = this.duration;					bufferLength = this.mozFrameBufferLength;					pt = null;				},								'MozAudioAvailable' : function (e) {									e = e.originalEvent; //objet Event original					var fb = e.frameBuffer;					var t  = e.time;					var value = 0;					var i=0,N=bufferLength / 2;										for (;i<N;i++) { value+= (fb[2*i] + fb[2*i+1]) / 2; }										var newpt = {						x : Math.round(10 * (t*width/duration)) / 10,						y : Math.round(10 * (value * that.initialZoom + height/2)) / 10					};												if (!pt || JSYG.distance(pt,newpt) > that.precision) {						pt = newpt;						d+='L'+pt.x+','+pt.y;						window.cancelAnimationFrame(request);						request = window.requestAnimationFrame(function() { path.attr('d',d); });					}				}			};						jNode.on(fcts);						function changeZoom() {				var path = new JSYG(that.path);				path.resetTransf().transfOrigin(0,'center').scaleNonUniform(1,this.value);			}						this.zoomCtrl.on('change',changeZoom);						if (this.zoomCtrl.enabled) { this.zoomCtrl.val(path.scaleY()); }						this.disable = function() {				jNode.off(fcts);				this.zoomCtrl.off('change',changeZoom);				this.enabled = false;				return this;			};						this.enabled = true;						return this;		},		/**		 * D�sactive le trac�		 * @returns {JSYG.AudioSignal}		 */		disable : function() { return this; }	};	})();